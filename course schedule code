# Code

class Solution {
    public boolean canFinish(int nv, int[][] pre) {
        Map<Integer, List<Integer>> g = new HashMap<>();
        for(int i=0;i<nv;i++){
            g.put(i, new ArrayList<>());
        }

        int ne = pre.length;
        int[] indegree = new int[nv];
        for(int i=0; i<ne; i++){
            int u =pre[i][1]; int v=pre[i][0];
            g.get(u).add(v);//directed
            indegree[v]++;
        }

        Queue<Integer> q = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        for(int i=0; i<nv; i++){
            if(indegree[i]==0){
                q.add(i); visited.add(i);
            }
        }
        int c=0;
        while(!q.isEmpty()){
            int u =q.remove();
            c++;
            for(int v: g.get(u)){
                if(!visited.contains(v)){
                    indegree[v]--;
                    if(indegree[v]==0){
                        q.add(v); visited.add(v);
                    }
                }
            }
        }
        if(c==nv) return true;
        else return false;
    }
}
